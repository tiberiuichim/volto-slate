{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Volto Slate # A replacement for the default Volto editor. For GIFs presenting Volto Slate, click here .","title":"The Plugin"},{"location":"#volto-slate","text":"A replacement for the default Volto editor. For GIFs presenting Volto Slate, click here .","title":"Volto Slate"},{"location":"building-the-docs/","text":"To build the docs # The prerequisites: $ pip install mkdocs $ pip install pymdown-extensions $ pip install mkdocs-material Then run this to start the local docs server: $ cd path/to/volto-slate/git/clone $ cd docs $ mkdocs serve For more info on mkdocs - the documentation engine being used by volto-slate - click here .","title":"Building the Docs"},{"location":"building-the-docs/#to-build-the-docs","text":"The prerequisites: $ pip install mkdocs $ pip install pymdown-extensions $ pip install mkdocs-material Then run this to start the local docs server: $ cd path/to/volto-slate/git/clone $ cd docs $ mkdocs serve For more info on mkdocs - the documentation engine being used by volto-slate - click here .","title":"To build the docs"},{"location":"directory-structure/","text":"Directory structure # The actual source code of this React-based Volto addon is inside the src/ directory. Below is the directory structure: docs/ - the documentation that you are reading right now ... src/ actions/ - Redux action creators specific to volto-slate editor/ - The essence of volto-slate: SlateEditor and all of its dependencies ui/ - Some React components for Volto Slate toolbars plugins/ - The currently 5 plugins that are used directly in the SlateEditor component extensions/ - extensions (also called decorators) which are used with SlateEditor less/ - The LESS styles for the SlateEditor futurevolto/ - Backport of possible future features of Volto, as a plugin, containing a config.js file that is the entry point reducers/ - Redux reducers specific to volto-slate TextBlock/ - the TextBlockView and TextBlockEdit React components whose roles are presented below keyboard/ - keyboard handlers used just in the TextBlockEdit component extensions/ - extensions (also called decorators) which are used just with the TextBlockEdit component utils/ - lots of functions used in the editor/ and TextBlock/ directories and grouped into 13 files There also are some unit tests near the files that they test and having the extension .test.jsx . The unit tests are created with jest and the jest snapshots in directories called __snapshots__ . Each direct subdirectory of src/ except futurevolto contains an index.js file so that the directory can be imported from other JS files. The /src directory directly contains the index.js file which configures the addon. This index.js file specifies, in this order: imports of the two React components used as an intermediary between Volto and the SlateEditor component defined within volto-slate: TextBlockView TextBlockEdit configuration for the new slate block type a change of the default Volto block type to slate extensions (also named decorators) and keyboard event handlers for TextBlockEdit installs a few default plugins for volto-slate Blockquote Link Footnote Markdown Image installs Volto proposals' widgets: \"object\" ( ObjectWidget ) \"object_browser\" ( ObjectBrowserWidget ) installation of the addon's reducers","title":"Directory Structure"},{"location":"directory-structure/#directory-structure","text":"The actual source code of this React-based Volto addon is inside the src/ directory. Below is the directory structure: docs/ - the documentation that you are reading right now ... src/ actions/ - Redux action creators specific to volto-slate editor/ - The essence of volto-slate: SlateEditor and all of its dependencies ui/ - Some React components for Volto Slate toolbars plugins/ - The currently 5 plugins that are used directly in the SlateEditor component extensions/ - extensions (also called decorators) which are used with SlateEditor less/ - The LESS styles for the SlateEditor futurevolto/ - Backport of possible future features of Volto, as a plugin, containing a config.js file that is the entry point reducers/ - Redux reducers specific to volto-slate TextBlock/ - the TextBlockView and TextBlockEdit React components whose roles are presented below keyboard/ - keyboard handlers used just in the TextBlockEdit component extensions/ - extensions (also called decorators) which are used just with the TextBlockEdit component utils/ - lots of functions used in the editor/ and TextBlock/ directories and grouped into 13 files There also are some unit tests near the files that they test and having the extension .test.jsx . The unit tests are created with jest and the jest snapshots in directories called __snapshots__ . Each direct subdirectory of src/ except futurevolto contains an index.js file so that the directory can be imported from other JS files. The /src directory directly contains the index.js file which configures the addon. This index.js file specifies, in this order: imports of the two React components used as an intermediary between Volto and the SlateEditor component defined within volto-slate: TextBlockView TextBlockEdit configuration for the new slate block type a change of the default Volto block type to slate extensions (also named decorators) and keyboard event handlers for TextBlockEdit installs a few default plugins for volto-slate Blockquote Link Footnote Markdown Image installs Volto proposals' widgets: \"object\" ( ObjectWidget ) \"object_browser\" ( ObjectBrowserWidget ) installation of the addon's reducers","title":"Directory structure"},{"location":"slate-document-schema/","text":"The Slate document schema used # LI s do not contain P s but Text nodes. TODO: complete this page.","title":"The Slate document schema used"},{"location":"slate-document-schema/#the-slate-document-schema-used","text":"LI s do not contain P s but Text nodes. TODO: complete this page.","title":"The Slate document schema used"},{"location":"volto-slate-plugins/","text":"volto-slate: a Volto text editor # Plugin configuration # There are multiple types of plugins: TextBlockEdit extensions TextBlockEdit keyboard handlers SlateEditor plugins SlateEditor extensions To configure a new volto-slate plugin as in the (3) list item above, you need to do something like this: create a new directory inside the plugins directory inside it create an index.js file with contents similar to these: export default function install ( config ) { const settings = config . settings ; settings . slate . buttons = [ ... settings . slate . buttons , 'block-quote' : < BlockButton ... /> ]; return config ; } add the reference to this install function inside the plugins/index.js file Available plugin extension points # Their initializations can be found inside /src/editor/config.jsx . slate.buttons - Object . Define new buttons as properties of this object with string keys slate.toolbarButtons - List . Add new buttons to the hovering toolbar slate.expandedToolbarButtons - List . Add new buttons to the expanded (fixed) toolbar slate.elements - Object . Define new block elements as properties of this object with string keys slate.extensions - List . Decorator functions receiving a Slate.js Editor instance and returning a modified Editor instance object slate.nodeTypesToHighlight - List . Slate.js type strings (e.g. \"paragraph\" , \"image\" etc.) for the types to be highlighted in the SlateEditor slate.htmlTagsToSlate - Object . Contains properties like this: if the property's key is A , the value of this property is a function receiving an editor parameter of type (Slate.js) Editor and an el Slate Element and this function handles link deserialization ( A is the HTML tag name for links). TODO: this list is not complete and actual. For all the extension points of List type listed above # If replacing it with a new list reference, please take into account the old list stored in the previous reference. In addition to the above extension points # Besides all these Volto Slate extension points there are all the other extension points of Volto for Volto Addons such as adding a new block type (the method of adding a new block type from a Volto Slate plugin is used in the Footnote plugin). Useful variables available for plugins # First of all, the Slate source code and docs are very helpful. Then the variables inside import path volto-slate/utils . Example: import { deconstructToVoltoBlocks } from 'volto-slate/utils' ; Some of them are: defaultListItemValue deconstructToVoltoBlocks For this function to work well, the new content that should be separated from the rest of the Slate document by this function must not be on the first index inside the editor, but in the second or a later position. If a Volto Slate Text block has just a single node (restriction: only of type block) in the root Editor node, deconstructToVoltoBlocks does nothing. This is how deconstructToVoltoBlocks works currently (1st of October, 2020).","title":"Volto Slate Plugins"},{"location":"volto-slate-plugins/#volto-slate-a-volto-text-editor","text":"","title":"volto-slate: a Volto text editor"},{"location":"volto-slate-plugins/#plugin-configuration","text":"There are multiple types of plugins: TextBlockEdit extensions TextBlockEdit keyboard handlers SlateEditor plugins SlateEditor extensions To configure a new volto-slate plugin as in the (3) list item above, you need to do something like this: create a new directory inside the plugins directory inside it create an index.js file with contents similar to these: export default function install ( config ) { const settings = config . settings ; settings . slate . buttons = [ ... settings . slate . buttons , 'block-quote' : < BlockButton ... /> ]; return config ; } add the reference to this install function inside the plugins/index.js file","title":"Plugin configuration"},{"location":"volto-slate-plugins/#available-plugin-extension-points","text":"Their initializations can be found inside /src/editor/config.jsx . slate.buttons - Object . Define new buttons as properties of this object with string keys slate.toolbarButtons - List . Add new buttons to the hovering toolbar slate.expandedToolbarButtons - List . Add new buttons to the expanded (fixed) toolbar slate.elements - Object . Define new block elements as properties of this object with string keys slate.extensions - List . Decorator functions receiving a Slate.js Editor instance and returning a modified Editor instance object slate.nodeTypesToHighlight - List . Slate.js type strings (e.g. \"paragraph\" , \"image\" etc.) for the types to be highlighted in the SlateEditor slate.htmlTagsToSlate - Object . Contains properties like this: if the property's key is A , the value of this property is a function receiving an editor parameter of type (Slate.js) Editor and an el Slate Element and this function handles link deserialization ( A is the HTML tag name for links). TODO: this list is not complete and actual.","title":"Available plugin extension points"},{"location":"volto-slate-plugins/#for-all-the-extension-points-of-list-type-listed-above","text":"If replacing it with a new list reference, please take into account the old list stored in the previous reference.","title":"For all the extension points of List type listed above"},{"location":"volto-slate-plugins/#in-addition-to-the-above-extension-points","text":"Besides all these Volto Slate extension points there are all the other extension points of Volto for Volto Addons such as adding a new block type (the method of adding a new block type from a Volto Slate plugin is used in the Footnote plugin).","title":"In addition to the above extension points"},{"location":"volto-slate-plugins/#useful-variables-available-for-plugins","text":"First of all, the Slate source code and docs are very helpful. Then the variables inside import path volto-slate/utils . Example: import { deconstructToVoltoBlocks } from 'volto-slate/utils' ; Some of them are: defaultListItemValue deconstructToVoltoBlocks For this function to work well, the new content that should be separated from the rest of the Slate document by this function must not be on the first index inside the editor, but in the second or a later position. If a Volto Slate Text block has just a single node (restriction: only of type block) in the root Editor node, deconstructToVoltoBlocks does nothing. This is how deconstructToVoltoBlocks works currently (1st of October, 2020).","title":"Useful variables available for plugins"}]}